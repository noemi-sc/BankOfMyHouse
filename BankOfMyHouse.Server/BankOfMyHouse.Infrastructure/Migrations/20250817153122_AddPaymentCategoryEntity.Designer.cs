// <auto-generated />
using System;
using BankOfMyHouse.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace BankOfMyHouse.Infrastructure.Migrations
{
    [DbContext(typeof(BankOfMyHouseDbContext))]
    [Migration("20250817153122_AddPaymentCategoryEntity")]
    partial class AddPaymentCategoryEntity
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BankOfMyHouse.Domain.BankAccounts.BankAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Balance")
                        .HasColumnType("numeric");

                    b.Property<DateTimeOffset>("CreationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("BankAccounts", (string)null);
                });

            modelBuilder.Entity("BankOfMyHouse.Domain.BankAccounts.Currency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("character varying(5)");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("Currencies", (string)null);
                });

            modelBuilder.Entity("BankOfMyHouse.Domain.BankAccounts.PaymentCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasDatabaseName("ix_payment_categories_code");

                    b.ToTable("payment_categories", (string)null);
                });

            modelBuilder.Entity("BankOfMyHouse.Domain.BankAccounts.Transaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric(18,2)")
                        .HasComment("Transaction amount in the account's base currency");

                    b.Property<int>("CurrencyId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasComment("Optional transaction description");

                    b.Property<int>("PaymentCategoryId")
                        .HasColumnType("integer")
                        .HasComment("Foreign key to payment category");

                    b.Property<string>("Receiver")
                        .IsRequired()
                        .HasMaxLength(34)
                        .HasColumnType("character varying(34)")
                        .HasColumnName("ReceiverIban")
                        .HasComment("Receiver's IBAN code");

                    b.Property<string>("Sender")
                        .IsRequired()
                        .HasMaxLength(34)
                        .HasColumnType("character varying(34)")
                        .HasColumnName("SenderIban")
                        .HasComment("Sender's IBAN code");

                    b.Property<DateTimeOffset>("TransactionCreation")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()")
                        .HasComment("UTC timestamp when transaction was created");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("PaymentCategoryId");

                    b.ToTable("Transactions", (string)null);
                });

            modelBuilder.Entity("BankOfMyHouse.Domain.Investments.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasComment("Company name");

                    b.HasKey("Id");

                    b.ToTable("Companies", (string)null);
                });

            modelBuilder.Entity("BankOfMyHouse.Domain.Investments.CompanyStockPrice", b =>
                {
                    b.Property<DateTimeOffset>("TimeOfPriceChange")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("CompanyId")
                        .HasColumnType("integer");

                    b.Property<decimal>("StockPrice")
                        .HasColumnType("numeric");

                    b.HasKey("TimeOfPriceChange", "CompanyId");

                    b.HasIndex("CompanyId");

                    b.ToTable("CompanyStockPrice");
                });

            modelBuilder.Entity("BankOfMyHouse.Domain.Investments.Investment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BankAccountId")
                        .HasColumnType("integer");

                    b.Property<int>("CompanyId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("SharesAmount")
                        .HasColumnType("numeric(18,2)")
                        .HasComment("Amount of shares invested in the company");

                    b.HasKey("Id");

                    b.HasIndex("BankAccountId");

                    b.HasIndex("CompanyId");

                    b.ToTable("Investments", (string)null);
                });

            modelBuilder.Entity("BankOfMyHouse.Domain.Users.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("RoleId");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Roles", (string)null);
                });

            modelBuilder.Entity("BankOfMyHouse.Domain.Users.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("UserId");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedAt")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("Email");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("IsActive");

                    b.Property<DateTime?>("LastLoginAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("LastLoginAt");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("PasswordHash");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("Username");

                    b.HasKey("Id")
                        .HasName("PK_Users");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("BankOfMyHouse.Domain.Users.UserRole", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("UserId");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer")
                        .HasColumnName("RoleId");

                    b.Property<DateTimeOffset>("AssignedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("AssignedAt")
                        .HasDefaultValueSql("NOW()");

                    b.Property<int?>("AssignedBy")
                        .HasColumnType("integer")
                        .HasColumnName("AssignedBy");

                    b.HasKey("UserId", "RoleId")
                        .HasName("PK_UserRoles");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", (string)null);
                });

            modelBuilder.Entity("BankOfMyHouse.Domain.BankAccounts.BankAccount", b =>
                {
                    b.HasOne("BankOfMyHouse.Domain.Users.User", "User")
                        .WithMany("BankAccounts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.OwnsOne("BankOfMyHouse.Domain.Iban.IbanCode", "IBAN", b1 =>
                        {
                            b1.Property<int>("BankAccountId")
                                .HasColumnType("integer");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(34)
                                .HasColumnType("character varying(34)")
                                .HasColumnName("IBAN")
                                .HasComment("International Bank Account Number");

                            b1.HasKey("BankAccountId");

                            b1.ToTable("BankAccounts");

                            b1.WithOwner()
                                .HasForeignKey("BankAccountId");
                        });

                    b.Navigation("IBAN")
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BankOfMyHouse.Domain.BankAccounts.Transaction", b =>
                {
                    b.HasOne("BankOfMyHouse.Domain.BankAccounts.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BankOfMyHouse.Domain.BankAccounts.PaymentCategory", "PaymentCategory")
                        .WithMany("Transactions")
                        .HasForeignKey("PaymentCategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Currency");

                    b.Navigation("PaymentCategory");
                });

            modelBuilder.Entity("BankOfMyHouse.Domain.Investments.CompanyStockPrice", b =>
                {
                    b.HasOne("BankOfMyHouse.Domain.Investments.Company", null)
                        .WithMany("StockPriceHistory")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BankOfMyHouse.Domain.Investments.Investment", b =>
                {
                    b.HasOne("BankOfMyHouse.Domain.BankAccounts.BankAccount", "BankAccount")
                        .WithMany("Investments")
                        .HasForeignKey("BankAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Investments_BankAccounts");

                    b.HasOne("BankOfMyHouse.Domain.Investments.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Investments_Companies");

                    b.Navigation("BankAccount");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("BankOfMyHouse.Domain.Users.UserRole", b =>
                {
                    b.HasOne("BankOfMyHouse.Domain.Users.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_UserRoles_Roles_RoleId");

                    b.HasOne("BankOfMyHouse.Domain.Users.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_UserRoles_Users_UserId");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BankOfMyHouse.Domain.BankAccounts.BankAccount", b =>
                {
                    b.Navigation("Investments");
                });

            modelBuilder.Entity("BankOfMyHouse.Domain.BankAccounts.PaymentCategory", b =>
                {
                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("BankOfMyHouse.Domain.Investments.Company", b =>
                {
                    b.Navigation("StockPriceHistory");
                });

            modelBuilder.Entity("BankOfMyHouse.Domain.Users.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("BankOfMyHouse.Domain.Users.User", b =>
                {
                    b.Navigation("BankAccounts");

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
